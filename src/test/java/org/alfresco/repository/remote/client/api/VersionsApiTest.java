/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.alfresco.repository.remote.client.api;

import org.alfresco.repository.remote.client.ApiException;
import org.alfresco.repository.remote.client.model.Error;
import org.threeten.bp.OffsetDateTime;
import org.alfresco.repository.remote.client.model.RevertBody;
import org.alfresco.repository.remote.client.model.VersionEntry;
import org.alfresco.repository.remote.client.model.VersionPaging;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VersionsApi
 */
@Ignore
public class VersionsApiTest {

    private final VersionsApi api = new VersionsApi();

    
    /**
     * Delete a version
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Delete the version identified by **versionId** and **nodeId*.  If the version is successfully deleted then the content and metadata for that versioned node will be deleted and will no longer appear in the version history. This operation cannot be undone.  If the most recent version is deleted the live node will revert to the next most recent version.  We currently do not allow the last version to be deleted. If you wish to clear the history then you can remove the \&quot;cm:versionable\&quot; aspect (via update node) which will also disable versioning. In this case, you can re-enable versioning by adding back the \&quot;cm:versionable\&quot; aspect or using the version  params (majorVersion and comment) on a subsequent file content update. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVersionTest() throws ApiException {
        String nodeId = null;
        String versionId = null;
        api.deleteVersion(nodeId, versionId);

        // TODO: test validations
    }
    
    /**
     * Get version information
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version information for **versionId** of file node **nodeId**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionTest() throws ApiException {
        String nodeId = null;
        String versionId = null;
        VersionEntry response = api.getVersion(nodeId, versionId);

        // TODO: test validations
    }
    
    /**
     * Get version content
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version content for **versionId** of file node **nodeId**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionContentTest() throws ApiException {
        String nodeId = null;
        String versionId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        api.getVersionContent(nodeId, versionId, attachment, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * List version history
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version history as an ordered list of versions for the specified **nodeId**.  The list is ordered in descending modified order. So the most recent version is first and  the original version is last in the list.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVersionHistoryTest() throws ApiException {
        String nodeId = null;
        List<String> include = null;
        List<String> fields = null;
        Integer skipCount = null;
        Integer maxItems = null;
        VersionPaging response = api.listVersionHistory(nodeId, include, fields, skipCount, maxItems);

        // TODO: test validations
    }
    
    /**
     * Revert a version
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to revert the version identified by **versionId** and **nodeId** to the live node.  If the node is successfully reverted then the content and metadata for that versioned node will be promoted to the live node and a new version will appear in the version history. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revertVersionTest() throws ApiException {
        String nodeId = null;
        String versionId = null;
        RevertBody revertBody = null;
        List<String> fields = null;
        VersionEntry response = api.revertVersion(nodeId, versionId, revertBody, fields);

        // TODO: test validations
    }
    
}
