/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.alfresco.repository.remote.client.api;

import org.alfresco.repository.remote.client.ApiException;
import org.alfresco.repository.remote.client.model.Error;
import org.alfresco.repository.remote.client.model.NodePaging;
import org.alfresco.repository.remote.client.model.PersonPaging;
import org.alfresco.repository.remote.client.model.SitePaging;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueriesApi
 */
@Ignore
public class QueriesApiTest {

    private final QueriesApi api = new QueriesApi();

    
    /**
     * Find nodes
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of nodes that match the given search criteria.  The search term is used to look for nodes that match against name, title, description, full text content or tags.  The search term: - must contain a minimum of 3 alphanumeric characters - allows \&quot;quoted term\&quot; - can optionally use &#39;*&#39; for wildcard matching  By default, file and folder types will be searched unless a specific type is provided as a query parameter.  By default, the search will be across the repository unless a specific root node id is provided to start the search from.  You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * name * modifiedAt * createdAt 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findNodesTest() throws ApiException {
        String term = null;
        String rootNodeId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        String nodeType = null;
        List<String> include = null;
        List<String> orderBy = null;
        List<String> fields = null;
        NodePaging response = api.findNodes(term, rootNodeId, skipCount, maxItems, nodeType, include, orderBy, fields);

        // TODO: test validations
    }
    
    /**
     * Find people
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of people that match the given search criteria.  The search term is used to look for matches against person id, firstname and lastname.  The search term: - must contain a minimum of 2 alphanumeric characters - can optionally use &#39;*&#39; for wildcard matching within the term  You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * firstName * lastName        
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPeopleTest() throws ApiException {
        String term = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        List<String> orderBy = null;
        PersonPaging response = api.findPeople(term, skipCount, maxItems, fields, orderBy);

        // TODO: test validations
    }
    
    /**
     * Find sites
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of sites that match the given search criteria.  The search term is used to look for sites that match against site id, title or description.  The search term: - must contain a minimum of 2 alphanumeric characters - can optionally use &#39;*&#39; for wildcard matching within the term  The default sort order for the returned list is for sites to be sorted by ascending id.  You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * description 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSitesTest() throws ApiException {
        String term = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> orderBy = null;
        List<String> fields = null;
        SitePaging response = api.findSites(term, skipCount, maxItems, orderBy, fields);

        // TODO: test validations
    }
    
}
