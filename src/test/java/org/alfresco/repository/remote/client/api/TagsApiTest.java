/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.alfresco.repository.remote.client.api;

import org.alfresco.repository.remote.client.ApiException;
import org.alfresco.repository.remote.client.model.Error;
import org.alfresco.repository.remote.client.model.TagBody;
import org.alfresco.repository.remote.client.model.TagEntry;
import org.alfresco.repository.remote.client.model.TagPaging;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Ignore
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    
    /**
     * Create a tag for a node
     *
     * Creates a tag on the node **nodeId**. You specify the tag in a JSON body like this:  &#x60;&#x60;&#x60;JSON {   \&quot;tag\&quot;:\&quot;test-tag-1\&quot; } &#x60;&#x60;&#x60;  **Note:** You can create more than one tag by  specifying a list of tags in the JSON body like this:  &#x60;&#x60;&#x60;JSON [   {     \&quot;tag\&quot;:\&quot;test-tag-1\&quot;   },   {     \&quot;tag\&quot;:\&quot;test-tag-2\&quot;   } ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  &#x60;&#x60;&#x60;JSON {   \&quot;list\&quot;: {     \&quot;pagination\&quot;: {       \&quot;count\&quot;: 2,       \&quot;hasMoreItems\&quot;: false,       \&quot;totalItems\&quot;: 2,       \&quot;skipCount\&quot;: 0,       \&quot;maxItems\&quot;: 100     },     \&quot;entries\&quot;: [       {         \&quot;entry\&quot;: {           ...         }       },       {         \&quot;entry\&quot;: {          ...         }       }     ]   } } &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTagForNodeTest() throws ApiException {
        String nodeId = null;
        TagBody tagBodyCreate = null;
        List<String> fields = null;
        TagEntry response = api.createTagForNode(nodeId, tagBodyCreate, fields);

        // TODO: test validations
    }
    
    /**
     * Delete a tag from a node
     *
     * Deletes tag **tagId** from node **nodeId**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTagFromNodeTest() throws ApiException {
        String nodeId = null;
        String tagId = null;
        api.deleteTagFromNode(nodeId, tagId);

        // TODO: test validations
    }
    
    /**
     * Get a tag
     *
     * Get a specific tag with **tagId**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        String tagId = null;
        List<String> fields = null;
        TagEntry response = api.getTag(tagId, fields);

        // TODO: test validations
    }
    
    /**
     * List tags
     *
     * Gets a list of tags in this repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        TagPaging response = api.listTags(skipCount, maxItems, fields);

        // TODO: test validations
    }
    
    /**
     * List tags for a node
     *
     * Gets a list of tags for node **nodeId**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTagsForNodeTest() throws ApiException {
        String nodeId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        TagPaging response = api.listTagsForNode(nodeId, skipCount, maxItems, fields);

        // TODO: test validations
    }
    
    /**
     * Update a tag
     *
     * Updates the tag **tagId**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        String tagId = null;
        TagBody tagBodyUpdate = null;
        List<String> fields = null;
        TagEntry response = api.updateTag(tagId, tagBodyUpdate, fields);

        // TODO: test validations
    }
    
}
