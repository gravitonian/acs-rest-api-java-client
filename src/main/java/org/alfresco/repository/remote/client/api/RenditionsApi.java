/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.alfresco.repository.remote.client.api;

import org.alfresco.repository.remote.client.ApiCallback;
import org.alfresco.repository.remote.client.ApiClient;
import org.alfresco.repository.remote.client.ApiException;
import org.alfresco.repository.remote.client.ApiResponse;
import org.alfresco.repository.remote.client.Configuration;
import org.alfresco.repository.remote.client.Pair;
import org.alfresco.repository.remote.client.ProgressRequestBody;
import org.alfresco.repository.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.alfresco.repository.remote.client.model.Error;
import org.threeten.bp.OffsetDateTime;
import org.alfresco.repository.remote.client.model.RenditionBodyCreate;
import org.alfresco.repository.remote.client.model.RenditionEntry;
import org.alfresco.repository.remote.client.model.RenditionPaging;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenditionsApi {
    private ApiClient apiClient;

    public RenditionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenditionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRendition
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRenditionCall(String nodeId, RenditionBodyCreate renditionBodyCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = renditionBodyCreate;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRenditionValidateBeforeCall(String nodeId, RenditionBodyCreate renditionBodyCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling createRendition(Async)");
        }
        
        // verify the required parameter 'renditionBodyCreate' is set
        if (renditionBodyCreate == null) {
            throw new ApiException("Missing the required parameter 'renditionBodyCreate' when calling createRendition(Async)");
        }
        

        com.squareup.okhttp.Call call = createRenditionCall(nodeId, renditionBodyCreate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create rendition
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createRendition(String nodeId, RenditionBodyCreate renditionBodyCreate) throws ApiException {
        createRenditionWithHttpInfo(nodeId, renditionBodyCreate);
    }

    /**
     * Create rendition
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createRenditionWithHttpInfo(String nodeId, RenditionBodyCreate renditionBodyCreate) throws ApiException {
        com.squareup.okhttp.Call call = createRenditionValidateBeforeCall(nodeId, renditionBodyCreate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create rendition (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRenditionAsync(String nodeId, RenditionBodyCreate renditionBodyCreate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRenditionValidateBeforeCall(nodeId, renditionBodyCreate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRendition
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRenditionCall(String nodeId, String renditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions/{renditionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", apiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRenditionValidateBeforeCall(String nodeId, String renditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getRendition(Async)");
        }
        

        com.squareup.okhttp.Call call = getRenditionCall(nodeId, renditionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get rendition information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return RenditionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenditionEntry getRendition(String nodeId, String renditionId) throws ApiException {
        ApiResponse<RenditionEntry> resp = getRenditionWithHttpInfo(nodeId, renditionId);
        return resp.getData();
    }

    /**
     * Get rendition information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;RenditionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenditionEntry> getRenditionWithHttpInfo(String nodeId, String renditionId) throws ApiException {
        com.squareup.okhttp.Call call = getRenditionValidateBeforeCall(nodeId, renditionId, null, null);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rendition information (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRenditionAsync(String nodeId, String renditionId, final ApiCallback<RenditionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRenditionValidateBeforeCall(nodeId, renditionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRenditionContent
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**,  then the placeholder image for the mime type of this rendition is returned, rather  than a 404 response.  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRenditionContentCall(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, Boolean placeholder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions/{renditionId}/content"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", apiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (attachment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attachment", attachment));
        if (placeholder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("placeholder", placeholder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifModifiedSince != null)
        localVarHeaderParams.put("If-Modified-Since", apiClient.parameterToString(ifModifiedSince));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRenditionContentValidateBeforeCall(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, Boolean placeholder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getRenditionContent(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getRenditionContent(Async)");
        }
        

        com.squareup.okhttp.Call call = getRenditionContentCall(nodeId, renditionId, attachment, ifModifiedSince, placeholder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get rendition content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**,  then the placeholder image for the mime type of this rendition is returned, rather  than a 404 response.  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getRenditionContent(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, Boolean placeholder) throws ApiException {
        getRenditionContentWithHttpInfo(nodeId, renditionId, attachment, ifModifiedSince, placeholder);
    }

    /**
     * Get rendition content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**,  then the placeholder image for the mime type of this rendition is returned, rather  than a 404 response.  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getRenditionContentWithHttpInfo(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, Boolean placeholder) throws ApiException {
        com.squareup.okhttp.Call call = getRenditionContentValidateBeforeCall(nodeId, renditionId, attachment, ifModifiedSince, placeholder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get rendition content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**,  then the placeholder image for the mime type of this rendition is returned, rather  than a 404 response.  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRenditionContentAsync(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, Boolean placeholder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRenditionContentValidateBeforeCall(nodeId, renditionId, attachment, ifModifiedSince, placeholder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listRenditions
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listRenditionsCall(String nodeId, String where, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("where", where));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listRenditionsValidateBeforeCall(String nodeId, String where, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listRenditions(Async)");
        }
        

        com.squareup.okhttp.Call call = listRenditionsCall(nodeId, where, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List renditions
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**  clause will return just the CREATED renditions:    &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return RenditionPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenditionPaging listRenditions(String nodeId, String where) throws ApiException {
        ApiResponse<RenditionPaging> resp = listRenditionsWithHttpInfo(nodeId, where);
        return resp.getData();
    }

    /**
     * List renditions
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**  clause will return just the CREATED renditions:    &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return ApiResponse&lt;RenditionPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenditionPaging> listRenditionsWithHttpInfo(String nodeId, String where) throws ApiException {
        com.squareup.okhttp.Call call = listRenditionsValidateBeforeCall(nodeId, where, null, null);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List renditions (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**  clause will return just the CREATED renditions:    &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listRenditionsAsync(String nodeId, String where, final ApiCallback<RenditionPaging> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listRenditionsValidateBeforeCall(nodeId, where, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
