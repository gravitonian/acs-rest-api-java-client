/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.alfresco.repository.remote.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RatingBody
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-20T09:14:31.122Z")
public class RatingBody {
  /**
   * The rating scheme type. Possible values are likes and fiveStar.
   */
  @JsonAdapter(IdEnum.Adapter.class)
  public enum IdEnum {
    LIKES("likes"),
    
    FIVESTAR("fiveStar");

    private String value;

    IdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdEnum fromValue(String text) {
      for (IdEnum b : IdEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IdEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("id")
  private IdEnum id = IdEnum.LIKES;

  @SerializedName("myRating")
  private String myRating = null;

  public RatingBody id(IdEnum id) {
    this.id = id;
    return this;
  }

   /**
   * The rating scheme type. Possible values are likes and fiveStar.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The rating scheme type. Possible values are likes and fiveStar.")
  public IdEnum getId() {
    return id;
  }

  public void setId(IdEnum id) {
    this.id = id;
  }

  public RatingBody myRating(String myRating) {
    this.myRating = myRating;
    return this;
  }

   /**
   * The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar
   * @return myRating
  **/
  @ApiModelProperty(required = true, value = "The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar")
  public String getMyRating() {
    return myRating;
  }

  public void setMyRating(String myRating) {
    this.myRating = myRating;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatingBody ratingBody = (RatingBody) o;
    return Objects.equals(this.id, ratingBody.id) &&
        Objects.equals(this.myRating, ratingBody.myRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, myRating);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatingBody {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    myRating: ").append(toIndentedString(myRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

